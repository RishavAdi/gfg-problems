class Solution {
public:bool dfs(vector<vector<char>>grid,string word,int n,int m,int x,int y,int ind,int dx,int dy){
        if(ind==word.length()) return true;
        if(x>=0&&x<n&&y>=0&&y<m&&grid[x][y]==word[ind])
        return dfs(grid,word,n,m,x+dx,y+dy,ind+1,dx,dy);
        return false;
    }
	vector<vector<int>>searchWord(vector<vector<char>>grid, string word){
	    int n=grid.size();
        int m=grid[0].size();
        int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
        vector<vector<int>>ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==word[0]){
                    for(int k=0;k<8;k++){
                         if(dfs(grid,word,n,m,i,j,0,dx[k],dy[k])){
                        vector<int>pos={i,j};
                        ans.push_back(pos);
                        break;
                    }
                    }
                }
            }
        }
        return ans;
	}
};
